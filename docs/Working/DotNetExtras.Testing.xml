<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DotNetExtras.Testing</name>
  </assembly>
  <members>
    <member name="T:DotNetExtras.Testing.Assertions.Exceptions.AssertionDataTypeNotImplementedException">
      <summary>
            Exception thrown when a data type is not implemented in an assertion.
            </summary>
      <param name="parameter">
            The parameter that caused the exception.
            </param>
      <param name="name">
            The name of the parameter.
            </param>
      <param name="method">
            The name of the method.
            </param>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Exceptions.AssertionDataTypeNotImplementedException.#ctor(System.Object,System.String,System.String)">
      <summary>
            Exception thrown when a data type is not implemented in an assertion.
            </summary>
      <param name="parameter">
            The parameter that caused the exception.
            </param>
      <param name="name">
            The name of the parameter.
            </param>
      <param name="method">
            The name of the method.
            </param>
    </member>
    <member name="T:DotNetExtras.Testing.Assertions.Exceptions.IncompatibleAssertionDataTypesException">
      <summary>
            Initializes a new instance of the <see cref="T:DotNetExtras.Testing.Assertions.Exceptions.IncompatibleAssertionDataTypesException" /> class.
            </summary>
      <param name="expected">
            The expected value.
            </param>
      <param name="actual">
            The actual value.
            </param>
      <param name="expectedName">
            The name of the expected parameter.
            </param>
      <param name="actualName">
            The name of the actual parameter.
            </param>
      <param name="method">
            The name of the method.
            </param>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Exceptions.IncompatibleAssertionDataTypesException.#ctor(System.Object,System.Object,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DotNetExtras.Testing.Assertions.Exceptions.IncompatibleAssertionDataTypesException" /> class.
            </summary>
      <param name="expected">
            The expected value.
            </param>
      <param name="actual">
            The actual value.
            </param>
      <param name="expectedName">
            The name of the expected parameter.
            </param>
      <param name="actualName">
            The name of the actual parameter.
            </param>
      <param name="method">
            The name of the method.
            </param>
    </member>
    <member name="T:DotNetExtras.Testing.Assertions.Exceptions.WrongAssertionForDataTypeException">
      <summary>
            Exception thrown when the handling of a specific data type for a parameter is not implemented in the assertion method.
            </summary>
      <param name="parameter">
            The parameter whose type handling is not implemented.
            </param>
      <param name="supportedAssertions">
            The supported assertions for the parameter type.
            </param>
      <param name="name">
            The name of the parameter.
            </param>
      <param name="method">
            The name of the assertion method.
            </param>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Exceptions.WrongAssertionForDataTypeException.#ctor(System.Object,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
      <summary>
            Exception thrown when the handling of a specific data type for a parameter is not implemented in the assertion method.
            </summary>
      <param name="parameter">
            The parameter whose type handling is not implemented.
            </param>
      <param name="supportedAssertions">
            The supported assertions for the parameter type.
            </param>
      <param name="name">
            The name of the parameter.
            </param>
      <param name="method">
            The name of the assertion method.
            </param>
    </member>
    <member name="T:DotNetExtras.Testing.Assertions.Must">
      <summary>
            Implements fluent assertion methods that can be utilized by unit tests.
            </summary>
      <remarks>
            This class implements wrappers for the existing <see href="https://xunit.net/">xUnit</see> assertions
            and provides additional methods not available in the xUnit assertion library.
            </remarks>
      <example>
        <code>
            user?.Must().NotBeNull();
            user?.Id?.Length?.Must().Equal(8);
            user?.Enabled?.Must().BeTrue();
            user?.Email?.Must().NotEndWith("example.com");
            user?.SocialAccounts?.Keys?.Must().NotBeNullOrEmpty().ContainAny(["github", "twitter", "facebook"]);
            </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.BeEmpty">
      <summary>
            Asserts that the string or collection is empty.
            </summary>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check a string.
            <code>
            "".Must().BeEmpty();
            </code>
            Check an array or any collection.
            <code>
            (new string[]).Must().BeEmpty();
            
            (new int[]).Must().BeEmpty();
            
            (new List&lt;string&gt;()).Must().BeEmpty();
            
            (new Dictionary&lt;string, string&gt;()).Must().BeEmpty();
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.BeFalse">
      <summary>
            Asserts that the value is false.
            </summary>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check a boolean value.
            <code>
            false.Must().BeFalse();
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.BeGreaterThan``1(``0)">
      <summary>
            Asserts that the value is greater than the expected value.
            </summary>
      <typeparam name="T">
            The type of the value and expected value. Must implement <see cref="T:System.IComparable`1" />.
            </typeparam>
      <param name="expected">
            The value to compare against.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check any simple type, such as integer, string, DateTime, etc.
            <code>
            2.Must().BeGreaterThan(1);
            
            "xyz".Must().BeGreaterThan("abc");
            
            DateTime.Now.AddDays(1).Must().BeGreaterThan(DateTime.Now);  
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.BeGreaterThanOrEqual``1(``0)">
      <summary>
            Asserts that the value is greater than or equal the expected value.
            </summary>
      <typeparam name="T">
            The type of the value and expected value. Must implement <see cref="T:System.IComparable`1" />.
            </typeparam>
      <param name="expected">
            The value to compare against.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check any simple type, such as integer, string, DateTime, etc.
            <code>
            2.Must().BeGreaterThanOrEqual(1);
            
            1.Must().BeGreaterThanOrEqual(1);
            
            "xyz".Must().BeGreaterThanOrEqual("abc");
            
            "abc".Must().BeGreaterThanOrEqual("abc");
            
            DateTime now = DateTime.Now;
            
            now.Must().BeGreaterThanOrEqual(now);  
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.BeLessThan``1(``0)">
      <summary>
            Asserts that the value is less than the expected value.
            </summary>
      <typeparam name="T">
            The type of the value and expected value. Must implement <see cref="T:System.IComparable`1" />.
            </typeparam>
      <param name="expected">
            The value to compare against.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check any simple type, such as integer, string, DateTime, etc.
            <code>
            1.Must().BeLessThan(2);
            
            "abc".Must().BeLessThan("xyz");
            
            DateTime.Now.Must().BeLessThan(DateTime.Now.AddDays(1));  
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.BeLessThanOrEqual``1(``0)">
      <summary>
            Asserts that the value is less than or equal the expected value.
            </summary>
      <typeparam name="T">
            The type of the value and expected value. Must implement <see cref="T:System.IComparable`1" />.
            </typeparam>
      <param name="expected">
            The value to compare against.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check any simple type, such as integer, string, DateTime, etc.
            <code>
            1.Must().BeLessThanOrEqual(2);
            
            1.Must().BeLessThanOrEqual(1);
            
            "abc".Must().BeLessThanOrEqual("xyz");
            
            "abc".Must().BeLessThanOrEqual("abc");
            
            DateTime now = DateTime.Now;
            
            now.Must().BeGreaterThanOrEqual(now);  
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.BeNull">
      <summary>
            Asserts that the value is null.
            </summary>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check any nullable type, such as object, string, array, etc.
            <code>
            object? o = null;
            o.Must().BeNull();
            
            string? s = null;
            s.Must().BeNull();
            
            string[]? a = null;
            a.Must().BeNull();
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.BeNullOrEmpty">
      <summary>
            Asserts that the string or collection is null or empty.
            </summary>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check a string.
            <code>
            "".Must().BeNulOrEmpty();
            
            string? s= null;
            s.Must().BeNullOrEmpty();
            </code>
            Check an array or any collection.
            <code>
            (new string[]).Must().BeNullOrEmpty();
            
            string[]? sa = null;
            sa.Must().BeNullOrEmpty();
            
            (new int[]).Must().BeNullOrEmpty();
            
            int[]? ia = null;
            ia.Must().BeNullOrEmpty();
            
            (new List&lt;string&gt;()).Must().BeNullOrEmpty();
            
            List&lt;string&gt;? ls = null;
            ls.Must().BeNullOrEmpty();
            
            (new Dictionary&lt;string, string&gt;()).Must().BeNullOrEmpty();
            
            Dictionary&lt;string, string&gt;? ds = null;
            ds.Must().BeNullOrEmpty();
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.BeOfType``1(System.Boolean)">
      <summary>
            Asserts that the value is of the specified type.
            </summary>
      <typeparam name="T">
            The expected type of the value.
            </typeparam>
      <param name="strict">
            Indicates whether to perform a strict type check.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check any type, including primitive types, complex types, and collections.
            <code>
            "abc".Must().BeOfType&lt;string&gt;();
            
            int i = 123;
            i.Must().BeOfType&lt;int&gt;();
            
            true.Must().BeOfType&lt;bool&gt;();
            
            DateTime.Now.Must().BeOfType&lt;DateTime&gt;();
            
            string[] stringArray = ["a", "b", "c"];
            stringArray.Must().BeOfType&lt;string[]&gt;();
            stringArray.Must().BeOfType&lt;IEnumerable&lt;string&gt;&gt;();
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.BeTrue">
      <summary>
            Asserts that the value is true.
            </summary>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check a boolean value.
            <code>
            true.Must().BeTrue();
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.Contain``1(``0,System.Boolean)">
      <summary>
            Asserts that the expected value exists in a collection.
            </summary>
      <typeparam name="T">
            Type of the expected value.
            </typeparam>
      <param name="expected">
            Value that is expected to be contained within the actual value.
            </param>
      <param name="partial">
            For complex types, 
            indicates whether the missing or null properties in the expected value 
            must be ignored in the actual value.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check a string.
            <code>
            string s = "Hello, my world!"; 
            s.Must().Contain("my");
            s.Must().Contain("my", false);
            s.Must().Contain("My", true);
            s.Must().Contain("MY", true);
            </code>
            Check a string collection.
            <code>
            string[] sa = ["Hello", "my", "world"];
            sa.Must().Contain("Hello", false);
            sa.Must().Contain("HELLO", true);
            
            List&lt;string&gt;&gt; sl = [.. sa];
            sl.Must().Contain("world", false);
            sl.Must().Contain("World", true);
            </code><code>
            int[] ia = [100, 200, 300];
            ia.Must().Contain(100);
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.Contain(System.String,System.Boolean)">
      <summary>
            Asserts that the expected string value exists in the actual string or collection of strings.
            </summary>
      <param name="expected">
            String value that is expected to be contained within the actual value.
            </param>
      <param name="ignoreCase">
            Indicates whether to ignore case when comparing strings.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check a string.
            <code>
            string s = "Hello, my world!";
            s.Must().Contain("my");
            s.Must().Contain("my", false);
            s.Must().Contain("My", true);
            s.Must().Contain("MY", true);
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.ContainAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>
             Asserts that all expected values exist in a collection.
             </summary>
      <typeparam name="T">
             Type of elements in the collection.
             </typeparam>
      <param name="expected">
             Collection of expected values.
             </param>
      <param name="partial">
             For complex types, 
             indicates whether the missing or null properties in the expected value 
             must be ignored in the actual value.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <remarks>
             Expected: 
             (a, b, c).ContainAll(a, b): true; 
             (a, b, c).ContainAll(c, d): false; 
             (a, b, c).ContainAll(d, e): false.
             </remarks>
      <example>
             Check a collection of objects.
             <code>
             List&lt;User&gt; users =
             [
                 new() { Name = new() { GivenName = "Joe", Surname = "Black" } , Id = "00000" },
                 new() { Name = new() { GivenName = "Mary", Surname = "Beth" } , Id = "54321" },
                 new() { Name = new() { GivenName = "John", Surname = "Doe" } , Id = "12345" },
                 new() { Name = new() { GivenName = "Jack", Surname = "Green" } , Id = "13579" },
             ];
            
             users.Must().ContainAll&lt;User&gt;
             ([
                 new() { Name = new() { GivenName = "John", Surname = "Doe" }, Id = "12345" }, 
                 new() { Name = new() { GivenName = "Jack", Surname = "Green" } , Id = "13579" }
             ], false);
            
             users.Must().ContainAll&lt;User&gt;
             ([
                 new() { Name = new() { GivenName = "John", Surname = "Doe" } },
                 new() { Name = new() { GivenName = "Jack", Surname = "Green" } }
              ], true);
             </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.ContainAll(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>
             Asserts that all expected string values exist in a string or string collection.
             </summary>
      <param name="expected">
             Collection of expected string values.
             </param>
      <param name="ignoreCase">
             Indicates whether to ignore case when comparing strings.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <remarks>
             Expected: 
             (a, b, c).ContainAll(a, b): true; 
             (a, b, c).ContainAll(c, d): false; 
             (a, b, c).ContainAll(d, e): false.
             </remarks>
      <example>
             Check a string.
             <code>
             string s = "Hello, my world!";
             
             s.Must().ContainAll(["Hello", "world"], false);
             s.Must().ContainAll(["HeLLo", "World"], true);
             </code>
             Check a collection of strings.
             <code>
             string[] a = ["Hello", "my", "world"];
             a.Must().ContainAll(["Hello", "world"], false);
            
             List&gt;string&lt; l = [.. a];
             l.Must().ContainAll(["HeLLo", "World"], true);
             </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.ContainAny``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>
             Asserts that at least one expected value exists in a collection. 
             </summary>
      <typeparam name="T">
             Type of the elements in the collections.
             </typeparam>
      <param name="expected">
             Collection of expected items.
             </param>
      <param name="partial">
             For complex types, 
             indicates whether the missing or null properties in the expected value 
             must be ignored in the actual value.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <remarks>
             Expected: 
             (a, b, c).ContainAny(a, b): true; 
             (a, b, c).ContainAny(c, d): true; 
             (a, b, c).ContainAny(d, e): false.
             </remarks>
      <example>
        <code>
             List&lt;User&gt; users =
             [
                 new() { Name = new() { GivenName = "Joe", Surname = "Black" } , Id = "00000" },
                 new() { Name = new() { GivenName = "Mary", Surname = "Beth" } , Id = "54321" },
                 new() { Name = new() { GivenName = "John", Surname = "Doe" } , Id = "12345" },
                 new() { Name = new() { GivenName = "Jack", Surname = "Green" } , Id = "13579" },
             ];
            
             users.Must().ContainAny&lt;User&gt;
             ([
                 new() { Name = new() { GivenName = "John", Surname = "Doe" }, Id = "12345" }, 
                 new() { Name = new() { GivenName = "Jack", Surname = "Green" } , Id = "00000" }
             ], false);
            
             users.Must().ContainAny&lt;User&gt;
             ([
                 new() { Name = new() { GivenName = "John", Surname = "Doe" } },
                 new() { Name = new() { GivenName = "Jack", Surname = "Yellow" } }
              ], true);
            
             users.Must().ContainAny&lt;User&gt;
             ([
                 new() { Name = new() { GivenName = "John" }, Id = "12345" },
                 new() { Name = new() { GivenName = "Jack" } , Id = "13579" },
             ], true);
            
             users.Must().ContainAny&lt;User&gt;
             ([
                 new() { Name = new() { Surname = "Doe" } },
                 new() { Name = new() { Surname = "Green" } }
             ], true);
            
             users.Must().ContainAny&lt;User&gt;
             ([
                 new() { Id = "12345" },
                 new() { Id = "13579" }
             ], true); 
             </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.ContainAny(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>
            Asserts that at least one expected string value exists in a collection or string.
            </summary>
      <param name="expected">
            Collection of expected string items.
            </param>
      <param name="ignoreCase">
            Indicates whether to ignore case when comparing strings.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <remarks>
            Expected: 
            (a, b, c).ContainAny(a, b): true; 
            (a, b, c).ContainAny(c, d): true; 
            (a, b, c).ContainAny(d, e): false.
            </remarks>
      <example>
            Check a string value.
            <code>
            string s = "Hello, my world!";
            s.Must().ContainAny(["Hello", "me"], false);
            s.Must().ContainAny(["Hi", "my"], false);
            s.Must().ContainAny(["HeLlo", "ME"], true);
            </code>
            Check a string collection.
            <code>
            string[] a = ["Hello", "my", "world"];
            a.Must().ContainAny(["Hello", "me"], false);
            
            List&lt;string&gt; l = new(a);
            l.Must().ContainAny(["MY", "world"], false);
            l.Must().ContainAny(["HELLO", "world"], false);
            l.Must().ContainAny(["Hi", "WORLD"], true);
            </code></example>
    </member>
    <member name="F:DotNetExtras.Testing.Assertions.Must._name">
      <summary>
            The name of the value being asserted.
            </summary>
    </member>
    <member name="F:DotNetExtras.Testing.Assertions.Must._actual">
      <summary>
            The value being asserted.
            </summary>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.#ctor(System.Object,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DotNetExtras.Testing.Assertions.Must" /> class.
            </summary>
      <param name="value">
            Value being assessed.
            </param>
      <param name="name">
            Name of the value being assessed.
            </param>
      <param name="caller">
            Caller member name.
            </param>
      <remarks>
            Intended for internal use only.
            </remarks>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.EndWith(System.String,System.Boolean)">
      <summary>
            Asserts that the value ends with the expected value.
            </summary>
      <param name="expected">
            The expected starting value.
            </param>
      <param name="ignoreCase">
            Indicates whether to ignore case when comparing strings.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
        <code>
            string s = "Hello, world!";
            s.Must().EndWith("world!", false);
            s.Must().EndWith("WORLD!", true);
            </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.Equal(System.String,System.Boolean)">
      <summary>
            Asserts that the value is equal to the expected value.
            </summary>
      <param name="expected">
            Expected value.
            </param>
      <param name="ignoreCase">
            Indicates whether to ignore case when comparing strings.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check a string.
            <code>
            string s = "abc";
            s.Must().Equal("abc", false);
            s.Must().Equal("ABC", true);
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.Equal(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>
             Asserts that the value is equal to the expected value.
             </summary>
      <param name="expected">
             Expected value.
             </param>
      <param name="ignoreCase">
             Indicates whether to ignore case when comparing strings.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <example>
             Check a string collection.
             <code>
             string[] sa = ["abc", "def", "ghi"];
             sa.Must().Equal(["abc", "def", "ghi"], false);
             sa.Must().Equal(["ABC", "Def", "ghi"], true);
            
             List&gt;string&gt; sl = ["abc", "def", "ghi"];
             sl.Must().Equal(["abc", "def", "ghi"], false);
             sl.Must().Equal(["ABC", "Def", "ghi"], true);
             </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.Equal``1(``0)">
      <summary>
             Asserts that the value is equal to the expected value.
             </summary>
      <typeparam name="T">
             Type of the expected value.
             </typeparam>
      <param name="expected">
             Expected value.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <example>
             Check simple types.
             <code>
             int i = 123;
             i.Must().Equal&lt;int&gt;(123);
             
             true.Must().Equal(true);
             
             DateTime dt = DateTime(2025, 12, 30, 24, 13, 8); 
             dt.Must().Equal&lt;DateTime&gt;(new DateTime(2025, 12, 30, 24, 13, 8));
             </code>
             Check string dictionary.
             <code>
             Dictionary&lt;string, string&gt; sd = new()
             {
                 ["abc"] = "def",
                 ["ghi"] = "jkl",
                 ["mno"] = "pqr"
             };
            
             sd.Must().Equal(new Dictionary&lt;string, string&gt;()
             {
                 ["abc"] = "def",
                 ["ghi"] = "jkl",
                 ["mno"] = "pqr"
             });
             </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.Match(System.String,System.Boolean)">
      <summary>
             Asserts that the actual string value matches the expected regular expression pattern.
             </summary>
      <param name="expected">
             The regular expression pattern that the actual string value is expected to match.
             </param>
      <param name="ignoreCase">
             Indicates whether to ignore case when comparing strings.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <remarks>
             If the expected pattern is null or empty, the assertion is considered successful.
             </remarks>
      <example>
        <code>
              string s = "Hello, world!";
            
              s.Must().Match("Hello, world!", false);
              s.Must().Match("HELLO, WORLD!", true);
              s.Must().Match("world", false);
              s.Must().Match("WORLD", true);
              s.Must().Match("^Hello, world!$", false);
              s.Must().Match("^HELLO, WORLD!$", true);
              s.Must().Match("^Hello,(\\s)*world!$", false);
              s.Must().Match("^HELLO,(\\s)*WORLD!$", true);
              s.Must().Match("^HELLO", true);
              s.Must().Match("^hello", true);
              s.Must().Match("WORLD!$", true);
              s.Must().Match("world!$", true);
             </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotBeEmpty">
      <summary>
             Asserts that the string or collection is not empty.
             </summary>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <example>
             Check a string.
             <code>
             "abc".Must().NotBeEmpty();
             </code>
             Check an array or any collection.
             <code>
             string[] sa = ["a", "b", "c"];
             sa.Must().NotBeEmpty();
            
             int[] ia = [1, 2, 3];
             ia.Must().NotBeEmpty();
            
             List&lt;string&gt;? sl = ["a", "b", "c"];
             sl.Must().NotBeEmpty();
            
             List&lt;int&gt;? il = [1, 2, 3];
             il.Must().NotBeEmpty();
            
             HashSet&lt;string&gt;? hs = ["a", "b", "c"];
             hs.Must().NotBeEmpty();
            
             Dictionary&lt;string, string&gt;? sd = new() { { "a", "b" } };
             sd.Must().NotBeEmpty();        
             </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotBeNull">
      <summary>
            Asserts that the value is null.
            </summary>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
        <code>
            object? o = new();
            o.Must().NotBeNull();
            
            string? s = "abc";
            s.Must().NotBeNull();
            
            string[]? a = [];
            a.Must().NotBeNull();
            </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotBeNullOrEmpty">
      <summary>
             Asserts that the string or collection is not null and not empty.
             </summary>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <example>
        <code>
             "abc".Must().NotBeNullOrEmpty();
             </code>
             Check an array or any collection.
             <code>
             string[] sa = ["a", "b", "c"];
             sa.Must().NotBeNullOrEmpty();
            
             int[] ia = [1, 2, 3];
             ia.Must().NotBeNullOrEmpty();
            
             List&lt;string&gt;? sl = ["a", "b", "c"];
             sl.Must().NotBeNullOrEmpty();
            
             List&lt;int&gt;? il = [1, 2, 3];
             il.Must().NotBeNullOrEmpty();
            
             HashSet&lt;string&gt;? hs = ["a", "b", "c"];
             hs.Must().NotBeNullOrEmpty();
            
             Dictionary&lt;string, string&gt;? sd = new() { { "a", "b" } };
             sd.Must().NotBeNullOrEmpty();        
             </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotBeOfType``1(System.Boolean)">
      <summary>
             Asserts that the value is not of the specified type.
             </summary>
      <typeparam name="T">
             The expected type of the value.
             </typeparam>
      <param name="strict">
             Indicates whether to perform a strict type check.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <example>
        <code>
             string s = "abc";
             s.Must().NotBeOfType&lt;bool&gt;();
             s.Must().NotBeOfType&lt;int&gt;();
             s.Must().NotBeOfType&lt;string[]&gt;();
            
             bool b = true;
             b.Must().NotBeOfType&lt;string&gt;();
             b.Must().NotBeOfType&lt;int&gt;();
             b.Must().NotBeOfType&lt;bool[]&gt;();
            
             int i = 1;
             i.Must().NotBeOfType&lt;string&gt;();
             i.Must().NotBeOfType&lt;bool&gt;();
             i.Must().NotBeOfType&lt;int[]&gt;();
             
             int[] ia = [1, 2, 3];
             ia.Must().NotBeOfType&lt;int&gt;();
             ia.Must().NotBeOfType&lt;List&lt;int&gt;&gt;();
             ia.Must().NotBeOfType&lt;string[]&gt;();
            
             List&lt;string&gt; sl = ["a", "b", "c"];
             sl.Must().NotBeOfType&lt;string&gt;();
             sl.Must().NotBeOfType&lt;string[]&gt;();
             sl.Must().NotBeOfType&lt;List&lt;int&gt;&gt;();
            
             List&lt;int&gt; il = [1, 2, 3];
             il.Must().NotBeOfType&lt;int&gt;();
             il.Must().NotBeOfType&lt;int[]&gt;();
             il.Must().NotBeOfType&lt;List&lt;string&gt;&gt;();
            
             Dictionary&lt;string, string&gt; sd = new() { { "a", "b" } };
             sd.Must().NotBeOfType&lt;string&gt;();
             sd.Must().NotBeOfType&lt;Dictionary&lt;int, string&gt;&gt;();
             sd.Must().NotBeOfType&lt;Dictionary&lt;string, int&gt;&gt;();
             sd.Must().NotBeOfType&lt;string[]&gt;();
             </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotContain``1(``0,System.Boolean)">
      <summary>
             Asserts that the expected value does not exist in a collection.
             </summary>
      <typeparam name="T">
             Type of the expected value.
             </typeparam>
      <param name="expected">
             Value that is expected to not be contained within the actual value.
             </param>
      <param name="partial">
             For complex types, 
             indicates whether the missing or null properties in the expected value 
             must be ignored in the actual value.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <example>
             Check collections of simple types.
             <code>
             string[] helloMyWorldArray = ["hello", "my", "world"];
             helloMyWorldArray.Must().NotContain("Hell", false);
             helloMyWorldArray.Must().NotContain("MY", false);
            
             List&lt;string&gt; helloMyWorldList = [.. helloMyWorldArray];
             helloMyWorldList.Must().NotContain("wo", false);
            
             int[] intArray = [100, 200, 300];
             intArray.Must().NotContain(400);
            
             List&lt;int&gt; intList = new(intArray);
             intList.Must().NotContain(500);
            
             long[] longArray = [1000, 2000, 3000];
             longArray.Must().NotContain((long)4000);
            
             List&lt;long&gt; longList = new(longArray);
             longList.Must().NotContain((long)5000);
            
             short[] shortArray = [10, 20, 30];
             shortArray.Must().NotContain((short)40);
            
             List&lt;short&gt; shortList = new(shortArray);
             shortList.Must().NotContain((short)50);
             </code>
             Check collection of complex type.
             <code>
             List&lt;User&gt; users =
             [
                 new() { Name = new() { GivenName = "Mary", Surname = "Beth" } , Id = "54321" },
                 new() { Name = new() { GivenName = "John", Surname = "Doe" } , Id = "12345" },
                 new() { Name = new() { GivenName = "Jack", Surname = "Green" } , Id = "13579" },
             ];
             users.Must().NotContain&lt;User&gt;(new() { Name = new() { GivenName = "John", Surname = "Doe" }, Id = "54321" }); 
             users.Must().NotContain&lt;User&gt;(new() { Name = new() { GivenName = "Joe", Surname = "Doe" } }, true); 
             users.Must().NotContain&lt;User&gt;(new() { Name = new() { GivenName = "John" }, Id = "13579" }, true); 
             users.Must().NotContain&lt;User&gt;(new() { Name = new() { Surname = "Do" } }, true); 
             users.Must().NotContain&lt;User&gt;(new() { Id = "24680" }, true); 
             </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotContain(System.String,System.Boolean)">
      <summary>
            Asserts that the expected string value does not exist in the actual string or collection of strings.
            </summary>
      <param name="expected">
            String value that is expected to not be contained within the actual value.
            </param>
      <param name="ignoreCase">
            Indicates whether to ignore case when comparing strings.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check that a string does not contain certain substrings.
            <code>
            string s = "Hello, my world!";
            s.Must().NotContain("My", false);
            s.Must().NotContain("HELLO", false);
            s.Must().NotContain("his", true);
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotContainAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>
             Asserts that all expected values do not exist in a collection.
             </summary>
      <typeparam name="T">
             The type of the elements in the collections.
             </typeparam>
      <param name="expected">
             The collection of items expected not to be in the actual collection or string.
             </param>
      <param name="partial">
             For complex types, 
             indicates whether the missing or null properties in the expected value 
             must be ignored in the actual value.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <remarks>
             Expected: 
             (a, b, c).NotContainAll(a, b): false; 
             (a, b, c).NotContainAll(c, d): true; 
             (a, b, c).NotContainAll(d, e): true;
             </remarks>
      <example>
             Check collections of simple types.
             <code>
             string[] helloMyWorldArray = ["Hello", "my", "world"];
             helloMyWorldArray.Must().NotContainAll(["hi", "there"], false);
             helloMyWorldArray.Must().NotContainAll(["Hell", "wo"], false);
             
             List&lt;string&gt; helloMyWorldList = new(helloMyWorldArray);
             helloMyWorldList.Must().NotContainAll(["HI", "THERE"], true);
             helloMyWorldList.Must().NotContainAll(["HELLOO", "WORLD!"], true);
            
             int[] intArray = [100, 200, 300];
             intArray.Must().NotContainAll([400, 500]);
            
             List&lt;int&gt; intList = new(intArray);
             intList.Must().NotContainAll([400, 500]);
            
             long[] longArray = [1000, 2000, 3000];
             longArray.Must().NotContainAll&lt;long&gt;([4000L, 5000L]);
            
             List&lt;long&gt; longList = new(longArray);
             longList.Must().NotContainAll&lt;long&gt;([4000L, 5000L]);
            
             short[] shortArray = [10, 20, 30];
             shortArray.Must().NotContainAll&lt;short&gt;([40, 50]);
            
             List&lt;short&gt; shortList = new(shortArray);
             shortList.Must().NotContainAll&lt;short&gt;([40, 50]);
             </code>
             Check collection of complex type.
             <code>
             List&lt;User&gt; users =
             [
                 new() { Name = new() { GivenName = "Joe", Surname = "Black" } , Id = "00000" },
                 new() { Name = new() { GivenName = "Mary", Surname = "Beth" } , Id = "54321" },
                 new() { Name = new() { GivenName = "John", Surname = "Doe" } , Id = "12345" },
                 new() { Name = new() { GivenName = "Jack", Surname = "Green" } , Id = "13579" },
             ];
            
             users.Must().NotContainAll&lt;User&gt;
             ([
                 new() { Name = new() { GivenName = "John", Surname = "Doe" }, Id = "00000" }, 
                 new() { Name = new() { GivenName = "Jack", Surname = "Yellow" } , Id = "13579" }
             ], false);
            
             users.Must().NotContainAll&lt;User&gt;
             ([
                 new() { Name = new() { GivenName = "John", Surname = "Doe" } },
                 new() { Name = new() { GivenName = "Jack", Surname = "Yellow" } }
              ], true);
            
             users.Must().NotContainAll&lt;User&gt;
             ([
                 new() { Name = new() { GivenName = "John" }, Id = "12345" },
                 new() { Name = new() { GivenName = "Jack" } , Id = "00000" },
             ], true);
            
             users.Must().NotContainAll&lt;User&gt;
             ([
                 new() { Name = new() { Surname = "Doe" } },
                 new() { Name = new() { Surname = "White" } }
             ], true);
            
             users.Must().NotContainAll&lt;User&gt;
             ([
                 new() { Id = "12345" },
                 new() { Id = "99999" }
             ], true); 
             </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotContainAll(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>
            Asserts that all expected string values doe not exist in a collection or string.
            </summary>
      <param name="expected">
            Collection of expected string values.
            </param>
      <param name="ignoreCase">
            Indicates whether to ignore case when comparing strings.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <remarks>
            Expected: 
            (a, b, c).NotContainAll(a, b): false; 
            (a, b, c).NotContainAll(c, d): true; 
            (a, b, c).NotContainAll(d, e): true;
            </remarks>
      <example>
            Check that a string does not contain all of the substrings.
            <code>
            string s = "Hello, my world!";
            s.Must().NotContainAll(["HELLO", "MY"], false);
            s.Must().NotContainAll(["Hello", "MY"], false);
            s.Must().NotContainAll(["Hi", "THERE"], true);
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotContainAny``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>
             Asserts that at least one expected value does not exist in a collection. 
             </summary>
      <typeparam name="T">
             Type of the elements in the collections.
             </typeparam>
      <param name="expected">
             Collection of items expected not to be in the actual collection or string.
             </param>
      <param name="partial">
             For complex types, 
             indicates whether the missing or null properties in the expected value 
             must be ignored in the actual value.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <remarks>
             Expected: 
             (a, b, c).NotContainAny(a, b): false; 
             (a, b, c).NotContainAny(a, d): false; 
             (a, b, c).NotContainAny(d, e): true.
             </remarks>
      <example>
             Check collections of simple types.
             <code>
             string[] helloMyWorldArray = ["Hello", "my", "world"];
             helloMyWorldArray.Must().NotContainAny(["hi", "there"], false);
             helloMyWorldArray.Must().NotContainAny(["Hell", "wo"], false);
             
             List&lt;string&gt; helloMyWorldList = new(helloMyWorldArray);
             helloMyWorldList.Must().NotContainAny(["HI", "THERE"], true);
             helloMyWorldList.Must().NotContainAny(["HELLOO", "WORLD!"], true);
            
             int[] intArray = [100, 200, 300];
             intArray.Must().NotContainAny([400, 500]);
            
             List&lt;int&gt; intList = new(intArray);
             intList.Must().NotContainAny([400, 500]);
            
             long[] longArray = [1000, 2000, 3000];
             longArray.Must().NotContainAny&lt;long&gt;([4000L, 5000L]);
            
             List&lt;long&gt; longList = new(longArray);
             longList.Must().NotContainAny&lt;long&gt;([4000L, 5000L]);
            
             short[] shortArray = [10, 20, 30];
             shortArray.Must().NotContainAny&lt;short&gt;([40, 50]);
            
             List&lt;short&gt; shortList = new(shortArray);
             shortList.Must().NotContainAny&lt;short&gt;([40, 50]);
             </code>
             Check collection of complex type.
             <code>
             List&lt;User&gt; users =
             [
                 new() { Name = new() { GivenName = "Joe", Surname = "Black" } , Id = "00000" },
                 new() { Name = new() { GivenName = "Mary", Surname = "Beth" } , Id = "54321" },
                 new() { Name = new() { GivenName = "John", Surname = "Doe" } , Id = "12345" },
                 new() { Name = new() { GivenName = "Jack", Surname = "Green" } , Id = "13579" },
             ];
            
             users.Must().NotContainAny&lt;User&gt;
             ([
                 new() { Name = new() { GivenName = "John", Surname = "Doe" }, Id = "00000" }, 
                 new() { Name = new() { GivenName = "Jack", Surname = "Yellow" } , Id = "13579" }
             ], false);
            
             users.Must().NotContainAny&lt;User&gt;
             ([
                 new() { Name = new() { GivenName = "John", Surname = "More" } },
                 new() { Name = new() { GivenName = "Jack", Surname = "Yellow" } }
              ], true);
            
             users.Must().NotContainAny&lt;User&gt;
             ([
                 new() { Name = new() { GivenName = "John" }, Id = "33333" },
                 new() { Name = new() { GivenName = "Jack" } , Id = "99999" },
             ], true);
            
             users.Must().NotContainAny&lt;User&gt;
             ([
                 new() { Name = new() { Surname = "Yellow" } },
                 new() { Name = new() { Surname = "White" } }
             ], true);
            
             users.Must().NotContainAny&lt;User&gt;
             ([
                 new() { Id = "33333" },
                 new() { Id = "99999" }
             ], true); 
             </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotContainAny(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>
            Asserts that at least one expected string does not exist in a collection of strings. 
            </summary>
      <param name="expected">
            Collection of expected string items.
            </param>
      <param name="ignoreCase">
            Indicates whether to ignore case when comparing strings.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <remarks>
            Expected: 
            (a, b, c).NotContainAny(a, b): false; 
            (a, b, c).NotContainAny(a, d): false; 
            (a, b, c).NotContainAny(d, e): true.
            </remarks>
      <example>
            Check that a string does not contain any of the substrings.
            <code>
            string s = "Hello, my world!";
            s.Must().NotContainAny(["HELLO", "MY"], false);
            s.Must().NotContainAny(["Hi", "THERE"], true);
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotEndWith(System.String,System.Boolean)">
      <summary>
             Asserts that the value does not end with the unexpected value.
             </summary>
      <param name="expected">
             Value expected not to be at the end of the string.
             </param>
      <param name="ignoreCase">
             Indicates whether to ignore case when comparing strings.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <example>
        <code>
             string s = "Hello, world!";
            
             s.Must().NotEndWith("Hello", false);
             s.Must().NotEndWith("WORLD!", false);
             </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotEqual(System.String,System.Boolean)">
      <summary>
            Asserts that the value is equal to the expected value.
            </summary>
      <param name="expected">
            Value expected not to equal the actual value.
            </param>
      <param name="ignoreCase">
            Indicates whether to ignore case when comparing strings.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check a string.
            <code>
            string s = "abc";
            
            s.Must().NotEqual("def");
            s.Must().NotEqual("ABC");
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotEqual(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>
             Asserts that the value is equal to the expected value.
             </summary>
      <param name="expected">
             Value expected not to equal the actual value.
             </param>
      <param name="ignoreCase">
             Indicates whether to ignore case when comparing strings.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <example>
             Check a string collection.
             <code>
             string[] stringArray1 = ["abc", "def", "ghi"];
             string[] stringArray1A= ["abc", "def", "ghi"];
             string[] stringArray2 = ["abc", "123", "ghi"];
             string[] stringArray3 = ["ABC", "Def", "ghi"];
            
             stringArray1.Must().NotEqual(stringArray2, false);
             stringArray2.Must().NotEqual(stringArray1, false);
             stringArray1.Must().NotEqual(stringArray3, false);
             stringArray3.Must().NotEqual(stringArray1, false);
            
             string[]? stringNullArray = null;
             stringNullArray.Must().NotEqual(stringArray1, false);
             stringNullArray.Must().NotEqual(stringArray1, true);
             stringArray1.Must().NotEqual(stringNullArray, false);
             stringArray1.Must().NotEqual(stringNullArray, true);
            
             List&lt;string&gt; stringList1 = ["abc", "def", "ghi"];
             List&lt;string&gt; stringList1A= ["abc", "def", "ghi"];
             List&lt;string&gt; stringList2 = ["abc", "123", "ghi"];       
             List&lt;string&gt; stringList3 = ["ABC", "Def", "ghi"];
            
             stringList1.Must().NotEqual(stringList2, false);
             stringList2.Must().NotEqual(stringList1, false);
             stringList1.Must().NotEqual(stringList3, false);
             stringList3.Must().NotEqual(stringList1, false);
            
             List&lt;string&gt;? stringNullList = null;
             stringNullList.Must().NotEqual(stringList1, false);
             stringNullList.Must().NotEqual(stringList1, true);
             stringList1.Must().NotEqual(stringNullList, false);
             stringList1.Must().NotEqual(stringNullList, true);
            
             HashSet&lt;string&gt; stringHashSet1 = ["abc", "def", "ghi"];
             HashSet&lt;string&gt; stringHashSet1A = ["abc", "def", "ghi"];
             HashSet&lt;string&gt; stringHashSet2 = ["abc", "123", "ghi"];
             HashSet&lt;string&gt; stringHashSet3 = ["ABC", "Def", "ghi"];
            
             stringHashSet1.Must().NotEqual(stringHashSet2, false);
             stringHashSet2.Must().NotEqual(stringHashSet1, false);
             stringHashSet1.Must().NotEqual(stringHashSet3, false);
             stringHashSet3.Must().NotEqual(stringHashSet1, false);
            
             HashSet&lt;string&gt;? stringNullHashSet = null;
             stringNullHashSet.Must().NotEqual(stringHashSet1, false);
             stringNullHashSet.Must().NotEqual(stringHashSet1, true);
             stringList1.Must().NotEqual(stringNullHashSet, false);
             stringList1.Must().NotEqual(stringNullHashSet, true);
            
             Dictionary&lt;string, string&gt; stringDictionary1 = new()
             {
                 ["abc"] = "def",
                 ["ghi"] = "jkl",
                 ["mno"] = "pqr"
             };
             Dictionary&lt;string, string&gt; stringDictionary1A = new()
             {
                 ["abc"] = "def",
                 ["ghi"] = "jkl",
                 ["mno"] = "pqr"
             };
            
             Dictionary&lt;string, string&gt; stringDictionary2 = new()
             {
                 ["abc"] = "def",
                 ["123"] = "jkl",
                 ["mno"] = "pqr"
             };
            
             stringDictionary1.Must().NotEqual(stringDictionary2);
             stringDictionary2.Must().NotEqual(stringDictionary1);
            
             Dictionary&lt;string,string&gt;? stringNullDictionary= null;
             stringNullDictionary.Must().NotEqual(stringDictionary1);
             stringDictionary1.Must().NotEqual(stringNullDictionary);
             </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotEqual``1(``0)">
      <summary>
            Asserts that the value is equal to the expected value.
            </summary>
      <typeparam name="T">
            Type of the expected value.
            </typeparam>
      <param name="expected">
            Value expected not to equal the actual value.
            </param>
      <returns>
            The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
            </returns>
      <example>
            Check a value.
            <code>
            1.Must().NotEqual(2);
            true.Must().NotEqual(false);
            DateTime.Now.Must().NotEqual(DateTime.Now.AddDays(1));  
            </code></example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotMatch(System.String,System.Boolean)">
      <summary>
             Asserts that the actual string value does not match the expected regular expression pattern.
             </summary>
      <param name="expected">
             The regular expression pattern that the actual string value is expected to not match.
             </param>
      <param name="ignoreCase">
             Indicates whether to ignore case when comparing strings.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <remarks>
             If the expected pattern is null or empty, the assertion is considered successful.
             </remarks>
      <example>
        <code>
             string s = "Hello, world!";
            
             s.Must().NotMatch("HELLO, world!", false);
             s.Must().NotMatch("HELL O, WORLD!", true);
             s.Must().NotMatch("worldX", false);
             s.Must().NotMatch("xWORLD", true);
             s.Must().NotMatch("^HELLO, world!$", false);
             s.Must().NotMatch("^HELLO, WO RLD!$", true);
             </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.NotStartWith(System.String,System.Boolean)">
      <summary>
             Asserts that the value does not start with the unexpected value.
             </summary>
      <param name="expected">
             Value expected not to be at the beginning of the string.
             </param>
      <param name="ignoreCase">
             Indicates whether to ignore case when comparing strings.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <example>
        <code>
             string s = "Hello, world!";
            
             s.Must().NotStartWith("world!", false);
             s.Must().NotStartWith("HELLO", false);
             s.Must().NotStartWith("hello", false);
             </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.Must.StartWith(System.String,System.Boolean)">
      <summary>
             Asserts that the value starts with the expected value.
             </summary>
      <param name="expected">
             The expected starting value.
             </param>
      <param name="ignoreCase">
             Indicates whether to ignore case when comparing strings.
             </param>
      <returns>
             The current <see cref="T:DotNetExtras.Testing.Assertions.Must" /> instance.
             </returns>
      <example>
        <code>
             string s = "Hello, world!";
            
             s.Must().StartWith("Hello", false);
             s.Must().StartWith("HELLO", true);
             s.Must().StartWith("hello", true);
             </code>
      </example>
    </member>
    <member name="T:DotNetExtras.Testing.Assertions.MustExtensions">
      <summary>
            Provides a single extension method to invoke a <see cref="M:DotNetExtras.Testing.Assertions.MustExtensions.Must(System.Object,System.String)" /> 
            assertion on any object, variable, or property.
            </summary>
    </member>
    <member name="M:DotNetExtras.Testing.Assertions.MustExtensions.Must(System.Object,System.String)">
      <summary>
            Starts the <see cref="M:DotNetExtras.Testing.Assertions.MustExtensions.Must(System.Object,System.String)" /> assertion chain on the specified object, variable, or property.
            </summary>
      <param name="value">
            The value to be asserted.
            </param>
      <param name="name">
            The name of the value parameter which is automatically captured by the compiler.
            </param>
      <returns>A new <see cref="M:DotNetExtras.Testing.Assertions.MustExtensions.Must(System.Object,System.String)" /> instance.</returns>
      <example>
        <code>
            user?.Must().NotBeNull();
            user?.Id?.Length?.Must().Equal(8);
            user?.Enabled?.Must().BeTrue();
            user?.Email?.Must().NotEndWith("example.com");
            user?.SocialAccounts?.Keys?.Must().NotBeNullOrEmpty().ContainAny(["github", "twitter", "facebook"]);
            </code>
      </example>
    </member>
    <member name="N:DotNetExtras.Testing.Assertions">
      <summary>Provides wrapper classes for XUnit and custom assertions used for unit testing.</summary>
    </member>
    <member name="N:DotNetExtras.Testing.Assertions.Exceptions">
      <summary>Groups assertion-specific exceptions.</summary>
    </member>
  </members>
</doc>